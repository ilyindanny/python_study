"""
Заметки из книги A Byte of Python
"""

# Строки сочленяются по умолчанию:

s = 'Hello ' 'World' '!'
print(s)

# Округление для метода format():

print('{0: .3}'.format(1.1234567))

# Метод format() может обрабатывать ключевые слова:

print('{name} написал {book}'.format(name='Swaroop', book='A Byte of Python'))

# Тройные кавычки это не только комментарии (PyCharm рекомендует три двойных кавычки для комментария),
# но и ограничение сложносоставного литерала:

s = '''текст
текст'''
print(s)

# И наоборот, тут явное обозначение соединения строк (обозначается обратным слэшем):

s = '''текст \
текст'''
print(s)

# если переносится строка с незакрытой скобкой, то обратный слэш можно не ставить.

# Точка с запятой ; это окончание логической строки, но так писать не рекомендуется. Вот так не нужно:

a = 16; b = 3

# Сдвиг влево или вправо. По сути сдвиг на 1 - это степени двойки:

a << 1
a >> 1


# Зарезервированное слово global объявляет переменную с глобальной видимостью.
# Зарезервированное слово nonlocal объявляет переменную во вложенном методе с видимостью для основного метода.

# Обращение по именам при вызове метода:

def func(l, m=5, q=10):
	print('l', l, 'm', m, 'q', q)


func(4, q=11)


# Переменное число параметров.
# Как только присвоено все основное, остальное будет присваиваться параметру со звездочкой
# (кортеж, потому что нужна именно константа) или двумя звездочками (словарь))

def total(l, *numbers, **phonebook):
	print('a', l)

	# проход по всем элементам кортежа
	for single_item in numbers:
		print('single_item', single_item)

	# проход по всем элементам словаря
	for first_part, second_part in phonebook.items():
		print(first_part, second_part)


total(10, 1, 2, Jack=1123, John=2231)


# В методе после переменного числа параметров можно указать еще один параметр,
# но он обязательно будет параметром по ключу, иначе его не отделить от предыдущих значений.
# У такого параметра может быть указано значение по умолчанию, например extra_number=6,
# но передавать аргументы в такой параметр все равно можно только по ключу:


def total(initial=5, *numbers, extra_number=6):
	count = initial
	for number in numbers:
		count += number
	count += extra_number
	print(count)


total(10, 1, 2, 3, extra_number=50)


# total(10, 1, 2, 3)  # А это вызовет ошибку, поскольку не указано значение аргумента по умолчанию для 'extra_number'.


# Строки документации. Первая логическая строка функции — строка документации.
# В первой строчке основное название функции или основное действие, что она возвращает.
# Потом пустая строка.
# Потом в третьей строке подробное описание.
# Доступ к строке документации функции printMax можно получить с помощью атрибута этой функции
# (т.е. имени, принадлежащего ей) точки и __doc__ либо при помощи функции help(printMax)
# также функция help() попросту выводит те самые строки документации

def printMax(x: int) -> None:
	'''Заголовок. Что выводит функция.

	Это третья строка, в ней помещают описание функции.'''

	pass


print(printMax.__doc__)
help(printMax)

# Чтобы импортировать функцию randint() прямо в программу
# и не писать всякий раз random. при обращении к ней, можно воспользоваться выражением «from random import randint».
# Для импорта всех имён, использующихся в модуле random,
# можно выполнить команду «from random import *».
# Это работает для любых модулей.
# Но это ведет к риску пересечения имен,
# поэтому лучше все-таки писать import random, то есть вызывать функцию через имя_модуля.имя_функции

from random import randint

a = randint(2, 5)

# удаление переменной:
a = 5
del a

# время в пользовательском формате:

import time

print(time.strftime('%Y %m %d; %H:%M %S'))

# мировое время:

import datetime

datetime.datetime.now()

# Сырые строки. Вместо «C:\\Documents»  можно писать «r'C:\Documents'».
# Однако, не используйте «'C:\Documents'», так как в этом случае окажется,
# что вы пытаетесь применить неизвестную управляющую последовательность \D.


# Пример с Лямбдой и методом sort():

points = [{'x': 2, 'y': 3}, {'x': 1, 'y': 2}]
points.sort(key=lambda i: i['y'])
print(points)