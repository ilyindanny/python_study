
# списки это вроде массива. типы могут быть разные. объявляется так:

text_list = []
# или сразу с инициализацией:
text_list = ['abc', '123', 456]

# или при помощи функции range:

text_list = list(range(-2, 2))

# или так:

text_list = [0] * 10


# копировать:

numbers2 = list(text_list)

# или так:

numbers2 = text_list[:]


# срез списка возвращает список:
text_list_cut = text_list[0: 2]
print(text_list_cut)

# а это срез с шагом:

text_list_cut2 = text_list_cut[::2]

# а это проход по списку задом наперед:

text_list_cut[::-1]


# добавление элемента в конец списка:
text_list.append('789')
print(text_list)

# добавление элемента в указанную позицию:
text_list.insert(2, 'abc')

# возвращает последний элемент, удаляя его из массива:
text_pop = text_list.pop()

# возвращает указанный элемент по индексу, удаляя его из массива:
text_pop = text_list.pop(0)

# метод очищает весь список:
# text_list.clear()

# удаление элемента из списка по содержимому:

text_list.remove('abc')
print(text_list)

# удаление элемента по индексу:
del text_list[1]
print(text_list)

#  удалить можно даже рандомно:

import random
lst = [1,2,3,4,5,6]
lst.pop(random.randint(1, len(lst)-1))


# функция возвращает длину списка:
print(len(text_list))

# двумерный массив и вывод на печать:

a = [[0,1,2,3,4],[5,6,7,8,9],[10,11,12,13,14],[15,16,17,18,19]]

for i in a:
    for j in i:
        print(j, end=' ')
    print()


col = [3, 9, 4, 5, 2]
9 in col # ищет 9 в col:
print(col)

# можно это написать соазу в параметрах функции print:

print(9 in col)

# сортировка списка:

col.sort()




# кортежи
# функция кортежа tuple()

a = (1, 2) # это кортеж. в отличие от списка инициализируется с круглыми скобками

a = tuple(['red', 'green', 'blue']) # задание кортежа из списка. в квадратных скобках тут как раз список

t = tuple('a b c d'.split()) # создание кортежа из строки

# чтобы присвоить  только одну координату кортежу можно, поставив запятую:
t = (1,)

print(a) # обращение ко всему кортежу

print(a[1]) # обращение к отдельной координате кортежа

print(a[-2]) # по аналогии с обращением к элементу списка с конца
# координате кортежа нельзя присвоить новое значение. a[0] = 3 - ошибка

colors = ['red', 'green', 'blue'] # это список (тут нужен для примеров)
t = tuple(colors) # это кортеж. инициализируется в круглых скобках
# tuple() это функция, возвращающая кортеж
a = list(t) # по аналогии с созданием кортежа из списка тут пример создания списка из кортежа

for e in t:
    print(e) # распечатать все элементы кортежа


# создание кортежа из списка и распаковка в переменные:

t = tuple(['red', 'green', 'blue'])
red, green, blue = t # это распаковка кортежа в переменные

a, b, c = 'a b c'.split() # по аналогии с распаковкой кортежа тут распаковка строки в перепенные



# еще одно хранилище данных — словари
# неупорядоченные коллекции произвольных объектов с доступом по ключу
# инициализируется словарь фигурными скобками {}, а обращение по ключу в квадратных []

dictionary = {} # объявление словаря
# функция словаря dict()


# обратный слэш позволяет переносить строки. иначе надо в одну строку писать:
    
dictionary = \
{
    '1': 'one',
    '2': 'two',
    '3': 'three'
}
# вот та же операция в одну строку:

dictionary = {'1': 'one', '2': 'two'}

print(dictionary) # распечатать словарь
print(dictionary['1']) # распечатать значение по ключу

# в цикле for переменная возвращает ключи

for k in dictionary.keys():
    print(k) # распечатать ключи
for v in dictionary.values():
    print(v) # распечатать значения
for i in dictionary:
    print(i) # это ключи
for i in dictionary:
    print(dictionary[i]) # это значения по ключу
for i in dictionary:
    print(dictionary[i], '- ', i) # это значения по ключу и ключи

# особый способ для вывода именно словаря. словари так не распечатаешь:

for x, y in dictionary.items():
    print(x, y)  # причем если словарь включен в кортеж как один из его элементов, то этот код тоже работает, только писать нужно for x, y in tuple[index].items(): то есть указывать индекс, под которым лежит словарь

dictionary['1'] = 'first' # так задается новое значение с ключом '1'

print(dictionary['1'])

del dictionary['1'] # удаление значения
print(dictionary)

# словарь надстрочных цифр:

dict = \
    {
        1: '\u00B9',
        2: '\u00B2',
        3: '\u00B3',
        4: '\u2074',
        5: '\u2075',
        6: '\u2076',
        7: '\u2077',
        8: '\u2078',
        9: '\u2079'
    }

print('x\u2074')

# и еще вот:

deg_sym = [8304, 185, 178, 179, 8308, 8309, 8310, 8311, 8312, 8313]

for i in deg_sym:
    print('{}{}'.format(3, chr(i)))




# множества
# хранение данных. задается с фигурными скобками {}. а обращение как в списках - элемент берется в скобки ()
# множества имеют операции логики (пересечение, объединение, разность, симметрическая разность и тд)
# ключевое слово множества set()


colors = {'abc', 'def', 'ghi'} # задать множество

a = set('a b c d a b'.split()) # множество из строки (дубликаты удаляются)

colors.add('jkl') # добавление элемента

m = {'a', 'b', 'a'} # добавление повторяющегося элемента невозможно, но ошибку не вызывает

colors.remove('jkl') # удаление. если элемента нет, будет ошибка
print(colors)

colors.discard('jk') # такое удаление не вызывает ошибку, если элемента нет

colors.clear() # очистить

b = colors.copy() # копирование множества colors в новое множество b

c = colors.union(b) # объединение в двух множеств в новой переменной

d = colors.intersection(b) # пересечение

d = colors.difference(b) # множество элементов colors не принадлежащие b

colors.clear() # очистить. также можно очистить словарь или список. только кортеж нельзя

c = frozenset(b) # замороженное неизменяемое множество


























