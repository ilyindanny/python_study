
# кортежи
# функция короежа tuple()

a = (1, 2) # это кортеж. в отличие от списка инициализируется с круглыми скобками

a = tuple(['red', 'green', 'blue']) # задание кортежа из списка. в квадратных скобках тут как раз список

t = tuple('a b c d'.split()) # создание кортежа из строки

# чтобы присвоить  только одну координату кортежу можно, поставив запятую:
t = (1,)

print(a) # обращение ко всему кортежу

print(a[1]) # обращение к отдельной координате кортежа

print(a[-2]) # по аналогии с обращением к элементу списка с конца
# координате кортежа нельзя присвоить новое значение. a[0] = 3 - ошибка

colors = ['red', 'green', 'blue'] # это список (тут нужен для примеров)
t = tuple(colors) # это кортеж. инициализируется в круглых скобках
# tuple() это функция, возвращающая кортеж
a = list(t) # по аналогии с созданием кортежа из списка тут пример создания списка из кортежа

for e in t:
    print(e) # распечатать все элементы кортежа


# создание кортежа из списка и распаковка в переменные:

t = tuple(['red', 'green', 'blue'])
red, green, blue = t # это распаковка кортежа в переменные

a, b, c = 'a b c'.split() # по аналогии с распаковкой кортежа тут распаковка строки в перепенные



# еще одно хранилище данных — словари
# неупорядоченные коллекции произвольных объектов с доступом по ключу
# инициализируется словарь фигурными скобками {}, а обращение по ключу в квадратных []

dictionary = {} # объявление словаря
# функция словаря dict()


# обратный слэш позволяет переносить строки. иначе надо в одну строку писать:
    
dictionary = \
{
    '1': 'one',
    '2': 'two',
    '3': 'three'
}
# вот та же операция в одну строку:

dictionary = {'1': 'one', '2': 'two'}

print(dictionary) # распечатать словарь
print(dictionary['1']) # распечатать значение по ключу

# в цикле for переменная возвращает ключи

for k in dictionary.keys():
    print(k) # распечатать ключи
for v in dictionary.values():
    print(v) # распечатать значения
for i in dictionary:
    print(i) # это ключи
for i in dictionary:
    print(dictionary[i]) # это значения по ключу
for i in dictionary:
    print(dictionary[i], '- ', i) # это значения по ключу и ключи

# особый способ для вывода именно словаря. словари так не распечатаешь:

for x, y in dictionary.items():
    print(x, y)

dictionary['1'] = 'first' # так задается значение ключа '1'

print(dictionary['1'])

del dictionary['1'] # удаление значения
print(dictionary)



# множества
# хранение данных. задается с фигурными скобками {}. а обращение как в списках - элемент берется в скобки ()
# множества имеют операции логики (пересечение, объединение, разность, симметрическая разность и тд)
# ключевое слово множества set()


colors = {'abc', 'def', 'ghi'} # задать множество

a = set('a b c d a b'.split()) # множество из строки (дубликаты удаляются)

colors.add('jkl') # добавление элемента

m = {'a', 'b', 'a'} # добавление повторяющегося элемента невозможно, но ошибку не вызывает

colors.remove('jkl') # удаление. если элемента нет, будет ошибка
print(colors)

colors.discard('jk') # такое удаление не вызывает ошибку, если элемента нет

colors.clear() # очистить

b = colors.copy() # копирование множества colors в новое множество b

c = colors.union(b) # объединение в двух множеств в новой переменной

d = colors.intersection(b) # пересечение

d = colors.difference(b) # множество элементов colors не принадлежащие b

colors.clear() # очистить. также можно очистить словарь или список. только кортеж нельзя

c = frozenset(b) # замороженное неизменяемое множество


























