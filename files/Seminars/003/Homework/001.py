# 1 Задайте список. Напишите программу, которая определит, присутствует ли в заданном списке строк некое число.


collection = ['123', '1223', 123, 12434, '123', '345', 'b1223']
text_coll = '1 123 1223 123 12434 123 345 b1223 345'
numm = '123'


# поиск искомого внутри каждого элемента:
def find_into_element(coll, n):
	result = False
	for i in coll:
		if n in str(i):
			result = True
	print(result)


find_into_element(collection, numm)


# 2 Напишите программу, которая определит позицию второго вхождения строки в списке либо сообщит, что её нет.
# Пример:
#
# список: ["qwe", "asd", "zxc", "qwe", "ertqwe"], ищем: "qwe", ответ: 3
# список: ["йцу", "фыв", "ячс", "цук", "йцукен", "йцу"], ищем: "йцу", ответ: 5
# список: ["йцу", "фыв", "ячс", "цук", "йцукен"], ищем: "йцу", ответ: -1
# список: ["123", "234", 123, "567"], ищем: "123", ответ: -1
# список: [], ищем: "123", ответ: -1

def find_element(coll, n):
	count = 0
	result = -1
	for i in range(len(coll)):
		if coll[i] == n:
			count += 1
			if count == 2:
				result = i
	print('позиция второго вхождения: ', result)


find_element(collection, numm)


# 3* (необязательная).
# Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется в этой книге.
#
# Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, разделённые пробелом, и
# вывести получившуюся статистику.
#
# Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального слова в этой строке
# число его повторений (без учёта регистра) в формате "слово количество" (см. пример вывода).
# Порядок вывода слов может быть произвольным, каждое уникальное слово должно выводиться только один раз.
#
# Sample Input 1:
#
# a aa abC aa ac abc bcd a
# Sample Output 1:
# ac 1
# a 2
# abc 2
# bcd 1
# aa 2
#
# Sample Input 2:
# a A a
# Sample Output 2:
# a 3


def literary_method(start_col):
	coll = list(start_col.lower().split())
	length = len(coll) - 1

	while length:
		count = 0
		index = 0
		n = coll[0]

		while index <= length:
			if n == coll[index]:
				del coll[index]
				count += 1
				length -= 1
			else:
				index += 1
		print(n, ' ', count)



literary_method(text_coll)
